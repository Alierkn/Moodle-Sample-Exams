[
  {
    "id": "challenge-1",
    "title": "Fibonacci Sequence",
    "description": "Write a function that returns the nth number in the Fibonacci sequence. The Fibonacci sequence is defined as: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.",
    "difficulty": "easy",
    "points": 10,
    "category": "algorithms",
    "language": "python",
    "testCases": [
      {"input": "0", "expected": "0"},
      {"input": "1", "expected": "1"},
      {"input": "2", "expected": "1"},
      {"input": "10", "expected": "55"}
    ],
    "starterCode": "def fibonacci(n):\n    # Your code here\n    pass",
    "solution": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"
  },
  {
    "id": "challenge-2",
    "title": "Reverse a String",
    "description": "Write a function that reverses a string. The input string is given as an array of characters.",
    "difficulty": "easy",
    "points": 5,
    "category": "strings",
    "language": "javascript",
    "testCases": [
      {"input": "hello", "expected": "olleh"},
      {"input": "world", "expected": "dlrow"},
      {"input": "a", "expected": "a"},
      {"input": "", "expected": ""}
    ],
    "starterCode": "function reverseString(str) {\n    // Your code here\n}",
    "solution": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}"
  },
  {
    "id": "challenge-3",
    "title": "Two Sum",
    "description": "Given an array of integers and a target sum, return the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
    "difficulty": "medium",
    "points": 15,
    "category": "arrays",
    "language": "java",
    "testCases": [
      {"input": "[2,7,11,15], 9", "expected": "[0,1]"},
      {"input": "[3,2,4], 6", "expected": "[1,2]"},
      {"input": "[3,3], 6", "expected": "[0,1]"}
    ],
    "starterCode": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your code here\n        return new int[]{0, 0};\n    }\n}",
    "solution": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        throw new IllegalArgumentException(\"No two sum solution\");\n    }\n}"
  },
  {
    "id": "challenge-4",
    "title": "Palindrome Check",
    "description": "Write a function that checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, such as 'madam' or 'racecar'.",
    "difficulty": "easy",
    "points": 8,
    "category": "strings",
    "language": "python",
    "testCases": [
      {"input": "racecar", "expected": "true"},
      {"input": "hello", "expected": "false"},
      {"input": "A man, a plan, a canal: Panama", "expected": "true"},
      {"input": "race a car", "expected": "false"}
    ],
    "starterCode": "def is_palindrome(s):\n    # Your code here\n    pass",
    "solution": "def is_palindrome(s):\n    # Convert to lowercase and remove non-alphanumeric characters\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    # Check if the string equals its reverse\n    return s == s[::-1]"
  },
  {
    "id": "challenge-5",
    "title": "Binary Search",
    "description": "Implement binary search algorithm. The function should return the index of the target if it's found in the array, or -1 if it's not found.",
    "difficulty": "medium",
    "points": 12,
    "category": "algorithms",
    "language": "javascript",
    "testCases": [
      {"input": "[1,2,3,4,5], 3", "expected": "2"},
      {"input": "[1,2,3,4,5], 6", "expected": "-1"},
      {"input": "[1,3,5,7,9], 5", "expected": "2"},
      {"input": "[], 5", "expected": "-1"}
    ],
    "starterCode": "function binarySearch(arr, target) {\n    // Your code here\n}",
    "solution": "function binarySearch(arr, target) {\n    let left = 0;\n    let right = arr.length - 1;\n    \n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        \n        if (arr[mid] === target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1;\n}"
  }
]
